[{"id":"29893","attempts_id":"205579","question_id":"29893","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mcq","answer":"2","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"What is the output of the following program?<br><br><span class=\"dCode dNoWrap\">1:&#160;public&#160;class&#160;FeedingSchedule&#160;{</span><br><span class=\"dCode dNoWrap\">2:&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{</span><br><span class=\"dCode dNoWrap\">3:&#160;&#160;&#160;&#160;int&#160;x&#160;=&#160;5,&#160;j&#160;=&#160;0;</span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;OUTER:&#160;for(int&#160;i=0;&#160;i&#60;3;&#160;)&#160;</span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;&#160;&#160;INNER:&#160;do&#160;{</span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i++;&#160;x++;</span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(x&#160;&#62;&#160;10)&#160;break&#160;INNER;</span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x&#160;+=&#160;4;</span><br><span class=\"dCode dNoWrap\">9:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;j++;</span><br><span class=\"dCode dNoWrap\">10:&#160;&#160;&#160;&#160;&#160;&#160;}&#160;while(j&#160;&#60;=&#160;2);</span><br><span class=\"dCode dNoWrap\">11:&#160;&#160;&#160;&#160;System.out.println(x);</span><br><span class=\"dCode dNoWrap\">12:&#160;}&#160;}</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">10</span>","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">12</span>","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">13</span>","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">17</span>","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"The code will not compile because of line 4.","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"The code will not compile because of line 6.","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"The code compiles and runs without issue; therefore options E and F are incorrect. This type of problem is best examined one loop iteration at a time:<br><ul class=\"dUL\"><li>On the first iteration of the outer loop <span class=\"dCode dNoWrap\">i</span> is <span class=\"dCode dNoWrap\">0</span>, so the loop continues.</li> <li>On the first iteration of the inner loop, <span class=\"dCode dNoWrap\">i</span> is updated to <span class=\"dCode dNoWrap\">1</span> and <span class=\"dCode dNoWrap\">x</span> to <span class=\"dCode dNoWrap\">6</span>. The <span class=\"dCode dNoWrap\">if-then</span> statement branch is not executed, and <span class=\"dCode dNoWrap\">x</span> is increased to <span class=\"dCode dNoWrap\">10</span> and <span class=\"dCode dNoWrap\">j</span> to <span class=\"dCode dNoWrap\">1</span>.</li> <li>On the second iteration of the inner loop (since <span class=\"dCode dNoWrap\">j&#160;=&#160;1</span> and <span class=\"dCode dNoWrap\">1&#160;&#60;=&#160;2</span>), <span class=\"dCode dNoWrap\">i</span> is updated to <span class=\"dCode dNoWrap\">2</span> and <span class=\"dCode dNoWrap\">x</span> to <span class=\"dCode dNoWrap\">11</span>. At this point, the <span class=\"dCode dNoWrap\">if-then</span> branch will evaluate to true for the remainder of the program run, which causes the flow to break out of the inner loop each time it is reached.</li> <li>On the second iteration of the outer loop (since <span class=\"dCode dNoWrap\">i&#160;=&#160;2</span>), <span class=\"dCode dNoWrap\">i</span> is updated to <span class=\"dCode dNoWrap\">3</span> and <span class=\"dCode dNoWrap\">x</span> to <span class=\"dCode dNoWrap\">12</span>. As before, the inner loop is broken since <span class=\"dCode dNoWrap\">x</span> is still greater than <span class=\"dCode dNoWrap\">10</span>.</li> <li>On the third iteration of the outer loop, the outer loop is broken, as <span class=\"dCode dNoWrap\">i</span> is already not less than <span class=\"dCode dNoWrap\">3</span>. The most recent value of <span class=\"dCode dNoWrap\">x</span>, <span class=\"dCode dNoWrap\">12</span>, is output, so the answer is option B. For more information, see Chapter 2.</li></ul>","display_order":"1"}]},{"id":"29902","attempts_id":"205579","question_id":"29902","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mmcq","answer":"1;3","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"Which of the following are checked exceptions? (Choose all that apply)","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">Exception</span>","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">IllegalArgumentException</span>","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">IOException</span>","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">NullPointerException</span>","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">NumberFormatException</span>","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">StackOverflowError</span>","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"Option A is the exception base class, which is a checked exception. Options B, D, and E extend <span class=\"dCode dNoWrap\">RuntimeException</span> directly or indirectly and therefore are unchecked exceptions. Option F is a throwable and not an exception, and so should not be caught or declared. For more information, see Chapter 6.","display_order":"1"}]},{"id":"29897","attempts_id":"205579","question_id":"29897","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mmcq","answer":"1;3;5","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"Which of the following statements can be inserted in the blank line so that the code will compile successfully? (Choose all that apply)<br><br><span class=\"dCode dNoWrap\">public&#160;interface&#160;CanSwim&#160;{}</span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Amphibian&#160;implements&#160;CanSwim&#160;{}</span><br><span class=\"dCode dNoWrap\">class&#160;Tadpole&#160;extends&#160;Amphibian&#160;{}</span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;FindAllTadPole&#160;{&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{&#160;&#160;&#160;&#160;List&#60;Tadpole&#62;&#160;tadpoles&#160;=&#160;new&#160;ArrayList&#60;Tadpole&#62;();&#160;&#160;&#160;&#160;for(Amphibian&#160;amphibian&#160;:&#160;tadpoles)&#160;{&#160;&#160;&#160;&#160;&#160;&#160;___________&#160;tadpole&#160;=&#160;amphibian;</span><br><span class=\"dCode dNoWrap\">}&#160;}&#160;}</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">CanSwim</span>","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">Long</span>","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">Amphibian</span>","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">Tadpole</span>","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">Object</span>","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"The <span class=\"dCode dNoWrap\">for-each</span> loop automatically casts each <span class=\"dCode dNoWrap\">Tadpole</span> object to an <span class=\"dCode dNoWrap\">Amphibian</span> reference, which does not require an explicit cast because <span class=\"dCode dNoWrap\">Tadpole</span> is a subclass of <span class=\"dCode dNoWrap\">Amphibian</span>. From there, any parent class or interface that <span class=\"dCode dNoWrap\">Amphibian</span> inherits from is permitted without an explicit cast. This includes <span class=\"dCode dNoWrap\">CanSwim</span>, the interface <span class=\"dCode dNoWrap\">Amphibian</span> implements, and <span class=\"dCode dNoWrap\">Object</span>, which all classes extend from, so options A and E are correct. Option C is also correct since the reference is being cast to the same type, so no explicit cast is required. Option B is incorrect, since <span class=\"dCode dNoWrap\">Long</span> is not a parent of <span class=\"dCode dNoWrap\">Amphibian</span>. Option D is incorrect as well, although an explicit cast to <span class=\"dCode dNoWrap\">Tadpole</span> on the right-hand side of the expression would be required to allow the code to compile. For more information, see Chapter 5.","display_order":"1"}]},{"id":"29891","attempts_id":"205579","question_id":"29891","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mmcq","answer":"2;3","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"Which of the following statements are true? (Choose all that apply)","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"Checked exceptions are intended to be thrown by the JVM (and not the programmer).","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"Checked exceptions are required to be caught or declared.","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"Errors are intended to be thrown by the JVM (and not the programmer).","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"Errors are required to be caught or declared.","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"Runtime exceptions are intended to be thrown by the JVM (and not the programmer).","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"Runtime exceptions are required to be caught or declared.","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"Only checked exceptions are required to be handled (caught) or declared. Runtime exceptions are commonly thrown by both the JVM and programmer code. Checked exceptions are usually thrown by programmer code. Errors are intended to be thrown by the JVM. While a programmer could throw one, this would be horrible practice. For more information, see Chapter 6.","display_order":"1"}]},{"id":"29894","attempts_id":"205579","question_id":"29894","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mcq","answer":"2","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"What is the result of the following program?<br><br><span class=\"dCode dNoWrap\">1:&#160;public&#160;class&#160;Egret&#160;{</span><br><span class=\"dCode dNoWrap\">2:&#160;&#160;private&#160;String&#160;color;</span><br><span class=\"dCode dNoWrap\">3:&#160;&#160;&#160;public&#160;Egret()&#160;{</span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;&#160;this(\"white\");</span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;}</span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;public&#160;Egret(String&#160;color)&#160;{</span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;&#160;color&#160;=&#160;color;</span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;}</span><br><span class=\"dCode dNoWrap\">9:&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{</span><br><span class=\"dCode dNoWrap\">10:&#160;&#160;&#160;&#160;Egret&#160;e&#160;=&#160;new&#160;Egret();</span><br><span class=\"dCode dNoWrap\">11:&#160;&#160;&#160;&#160;System.out.println(\"Color:\"&#160;+&#160;e.color);</span><br><span class=\"dCode dNoWrap\">12:&#160;&#160;&#160;}</span><br><span class=\"dCode dNoWrap\">13:&#160;}</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">Color:</span>","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">Color:null</span>","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">Color:White</span>","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"Compiler error on line 4","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"Compiler error on line 10","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"Compiler error on line 11","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"Line 10 calls the constructor on lines 3&#8211;5. That constructor calls the other constructor. However, the constructor on lines 6&#8211;8 assigns the method parameter to itself, which leaves the <span class=\"dCode dNoWrap\"><i>color</i></span> instance variable on line 2 set to its default value of <span class=\"dCode dNoWrap\"><i>null</i></span>. For more information, see Chapter 4.","display_order":"1"}]},{"id":"29889","attempts_id":"205579","question_id":"29889","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mcq","answer":"2","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"What is the result of the following code?<br><br><span class=\"dCode dNoWrap\">int[]&#160;array&#160;=&#160;{6,9,8};</span><br><span class=\"dCode dNoWrap\">List&#60;Integer&#62;&#160;list&#160;=&#160;new&#160;ArrayList&#60;&#62;();</span><br><span class=\"dCode dNoWrap\">list.add(array[0]);</span><br><span class=\"dCode dNoWrap\">list.add(array[2]);</span><br><span class=\"dCode dNoWrap\">list.set(1,&#160;array[1]);</span><br><span class=\"dCode dNoWrap\">list.remove(0);</span><br><span class=\"dCode dNoWrap\">System.out.println(list);</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">[8]</span>","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">[9]</span>","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"Something like <span class=\"dCode dNoWrap\">[Ljava.lang.String;@160bc7c0</span>","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"An exception is thrown.","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"The code does not compile.","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"The array is allowed to use an anonymous initializer because it is in the same line as the declaration. The <span class=\"dCode dNoWrap\">ArrayList</span> uses the diamond operator allowed since Java 7. This specifies the type matches the one on the left without having to re-type it. After adding the two elements, <span class=\"dCode dNoWrap\"><i>list</i></span> contains <span class=\"dCode dNoWrap\">[6,&#160;8]</span>. We then replace the element at index 1 with 9, resulting in <span class=\"dCode dNoWrap\">[6,&#160;9]</span>. Finally, we remove the element at index 0, leaving <span class=\"dCode dNoWrap\">[9]</span>. Option C is incorrect because arrays output something like that rather than an <span class=\"dCode dNoWrap\">ArrayList</span>. For more information, see Chapter 3.","display_order":"1"}]},{"id":"29887","attempts_id":"205579","question_id":"29887","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mcq","answer":"4","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"What is the output of the following code snippet?<br><br><span class=\"dCode dNoWrap\">13:&#160;System.out.print(\"a\");</span><br><span class=\"dCode dNoWrap\">14:&#160;try&#160;{</span><br><span class=\"dCode dNoWrap\">15:&#160;&#160;&#160;System.out.print(\"b\");</span><br><span class=\"dCode dNoWrap\">16:&#160;&#160;&#160;throw&#160;new&#160;IllegalArgumentException();</span><br><span class=\"dCode dNoWrap\">17:&#160;}&#160;catch&#160;(RuntimeException&#160;e)&#160;{</span><br><span class=\"dCode dNoWrap\">18:&#160;&#160;&#160;System.out.print(\"c\");</span><br><span class=\"dCode dNoWrap\">19:&#160;}&#160;finally&#160;{</span><br><span class=\"dCode dNoWrap\">20:&#160;&#160;&#160;System.out.print(\"d\");</span><br><span class=\"dCode dNoWrap\">21:&#160;}</span><br><span class=\"dCode dNoWrap\">22:&#160;System.out.print(\"e\");</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">abe</span>","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">abce</span>","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">abde</span>","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">abcde</span>","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"The code does not compile.","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"An uncaught exception is thrown.","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"The code starts running and prints <span class=\"dCode dNoWrap\">a</span> and <span class=\"dCode dNoWrap\">b</span> on lines 13 and 15. Line 16 throws an exception, which is caught on line 17. After line 18 prints <span class=\"dCode dNoWrap\">c</span>, the <span class=\"dCode dNoWrap\">finally</span> block is run and <span class=\"dCode dNoWrap\">d</span> is printed. Then the <span class=\"dCode dNoWrap\">try</span> statement ends and <span class=\"dCode dNoWrap\">e</span> is printed on line 22. For more information, see Chapter 6.","display_order":"1"}]},{"id":"29885","attempts_id":"205579","question_id":"29885","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mmcq","answer":"3;4;5","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"What is the output of the following code? (Choose all that apply)<br><br><span class=\"dCode dNoWrap\">1:&#160;interface&#160;HasTail&#160;{&#160;int&#160;getTailLength();&#160;}</span><br><span class=\"dCode dNoWrap\">2:&#160;abstract&#160;class&#160;Puma&#160;implements&#160;HasTail&#160;{</span><br><span class=\"dCode dNoWrap\">3:&#160;&#160;&#160;protected&#160;int&#160;getTailLength()&#160;{return&#160;4;}</span><br><span class=\"dCode dNoWrap\">4:&#160;}</span><br><span class=\"dCode dNoWrap\">5:&#160;public&#160;class&#160;Cougar&#160;extends&#160;Puma&#160;{</span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{</span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;Puma&#160;puma&#160;=&#160;new&#160;Puma();</span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;System.out.println(puma.getTailLength());</span><br><span class=\"dCode dNoWrap\">9:&#160;&#160;}</span><br><span class=\"dCode dNoWrap\">10:</span><br><span class=\"dCode dNoWrap\">11:&#160;&#160;public&#160;int&#160;getTailLength(int&#160;length)&#160;{return&#160;2;}</span><br><span class=\"dCode dNoWrap\">12:&#160;}</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">2</span>","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">4</span>","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"The code will not compile because of line 3.","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"The code will not compile because of line 5.","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"The code will not compile because of line 7.","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"The code will not compile because of line 11.","display_order":"1"}]},{"id":"7","data":[{"data_type_id":"2","data":"The output cannot be determined from the code provided.","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"First, the method <span class=\"dCode dNoWrap\">getTailLength()</span> in the interface <span class=\"dCode dNoWrap\">HasTail</span> is assumed to be <span class=\"dCode dNoWrap\">public</span>, since it is part of an interface. The implementation of the method on line 3 is therefore an invalid override, as <span class=\"dCode dNoWrap\">protected</span> is a more restrictive access modifier than <span class=\"dCode dNoWrap\">public</span>, so option C is correct. Next, the class <span class=\"dCode dNoWrap\">Cougar</span> implements an overloaded version of <span class=\"dCode dNoWrap\">getTailLength()</span>, but since the declaration in the parent class <span class=\"dCode dNoWrap\">Puma</span> is invalid, it needs to implement a public version of the method. Since it does not, the declaration of <span class=\"dCode dNoWrap\">Puma</span> is invalid, so option D is correct. Option E is incorrect, since <span class=\"dCode dNoWrap\">Puma</span> is marked <span class=\"dCode dNoWrap\">abstract</span> and cannot be instantiated. The overloaded method on line 11 is declared correctly, so option F is not correct. Finally, as the code has multiple compiler errors, options A, B, and G can be eliminated. For more information, see Chapter 5.","display_order":"1"}]},{"id":"29900","attempts_id":"205579","question_id":"29900","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mmcq","answer":"2;4","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"Which of the following print out a date representing April 1, 2015? (Choose all that apply)","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">System.out.println(LocalDate.of(2015,&#160;Calendar.APRIL,&#160;1));</span>","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">System.out.println(LocalDate.of(2015,&#160;Month.APRIL,&#160;1));</span>","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">System.out.println(LocalDate.of(2015,&#160;3,&#160;1));</span>","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">System.out.println(LocalDate.of(2015,&#160;4,&#160;1));</span>","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">System.out.println(new&#160;LocalDate(2015,&#160;3,&#160;1));</span>","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">System.out.println(new&#160;LocalDate(2015,&#160;4,&#160;1));</span>","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"The new date APIs added in Java 8 use static methods rather than a constructor to create a new date, making options E and F incorrect. The months are indexed starting with 1 in these APIs, making options A and C incorrect. Option A uses the old <span class=\"dCode dNoWrap\">Calendar</span> constants with are indexed from 0. Therefore, options B and D are correct. For more information, see Chapter 3.","display_order":"1"}]},{"id":"29901","attempts_id":"205579","question_id":"29901","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mcq","answer":"3","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"Bytecode is in a file with which extension?","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">.bytecode</span>","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">.bytes</span>","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">.class</span>","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">.exe</span>","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">.javac</span>","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">.java</span>","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"&#160;","display_order":"1"}]},{"id":"29898","attempts_id":"205579","question_id":"29898","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mmcq","answer":"4;6;7","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"What individual changes, if any, would allow the following code to compile? (Choose all that apply)<br><br><span class=\"dCode dNoWrap\">1:&#160;public&#160;interface&#160;Animal&#160;{&#160;public&#160;default&#160;String&#160;getName()&#160;{&#160;return&#160;null;&#160;}&#160;}</span><br><span class=\"dCode dNoWrap\">2:&#160;interface&#160;Mammal&#160;{&#160;public&#160;default&#160;String&#160;getName()&#160;{&#160;return&#160;null;&#160;}&#160;}</span><br><span class=\"dCode dNoWrap\">3:&#160;abstract&#160;class&#160;Otter&#160;implements&#160;Mammal,&#160;Animal&#160;{}</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"The code compiles without issue.","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"Remove the <span class=\"dCode dNoWrap\">default</span> method modifier and method implementation on line 1.","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"Remove the <span class=\"dCode dNoWrap\">default</span> method modifier and method implementation on line 2.","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"Remove the <span class=\"dCode dNoWrap\">default</span> method modifier and method implementation on lines 1 and 2.","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"Change the return value on line 1 from <span class=\"dCode dNoWrap\">null</span> to <span class=\"dCode dNoWrap\">\"Animal\"</span>.","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"Override the <span class=\"dCode dNoWrap\">getName()</span> method with an <span class=\"dCode dNoWrap\">abstract</span> method in the <span class=\"dCode dNoWrap\">Otter</span> class.","display_order":"1"}]},{"id":"7","data":[{"data_type_id":"2","data":"Override the <span class=\"dCode dNoWrap\">getName()</span> method with a concrete method in the <span class=\"dCode dNoWrap\">Otter</span> class.","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"The code does not compile, since a class cannot inherit two interfaces that both define default methods with the same signature, unless the class implementing the interfaces overrides it with an abstract or concrete method. Therefore, option A is incorrect and options F and G are correct. The alternate approach is to make the <span class=\"dCode dNoWrap\">getName()</span> method abstract in the interfaces, because an interface may inherit two abstract methods with the same signature. The change must be made to both interfaces, though, so options B and C are incorrect if taken individually, and option D is correct since the changes are taken together. For more information, see Chapter 5.","display_order":"1"}]},{"id":"29892","attempts_id":"205579","question_id":"29892","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mmcq","answer":"3;4;6","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"Which are true of the following code? (Choose all that apply)<br><br><span class=\"dCode dNoWrap\">1:&#160;&#160;import&#160;java.util.*;</span><br><span class=\"dCode dNoWrap\">2:&#160;&#160;public&#160;class&#160;Grasshopper&#160;{</span><br><span class=\"dCode dNoWrap\">3:&#160;&#160;public&#160;Grasshopper(String&#160;n)&#160;{</span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;&#160;name&#160;=&#160;n;</span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;}</span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{</span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;Grasshopper&#160;one&#160;=&#160;new&#160;Grasshopper(\"g1\");</span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;Grasshopper&#160;two&#160;=&#160;new&#160;Grasshopper(\"g2\");</span><br><span class=\"dCode dNoWrap\">9:&#160;&#160;one&#160;=&#160;two;</span><br><span class=\"dCode dNoWrap\">10:&#160;two&#160;=&#160;null;</span><br><span class=\"dCode dNoWrap\">11:&#160;one&#160;=&#160;null;</span><br><span class=\"dCode dNoWrap\">12:&#160;}</span><br><span class=\"dCode dNoWrap\">13:&#160;private&#160;String&#160;name;&#160;}</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"Immediately after line 9, no grasshopper objects are eligible for garbage collection.","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"Immediately after line 10, no grasshopper objects are eligible for garbage collection.","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"Immediately after line 9, only one grasshopper object is eligible for garbage collection.","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"Immediately after line 10, only one grasshopper object is eligible for garbage collection.","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"Immediately after line 11, only one grasshopper object is eligible for garbage collection.","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"The code compiles.","display_order":"1"}]},{"id":"7","data":[{"data_type_id":"2","data":"The code does not compile.","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"Immediately after line 9, only <span class=\"dCode dNoWrap\">Grasshopper&#160;g1</span> is eligible for garbage collection since both <span class=\"dCode dNoWrap\">one</span> and <span class=\"dCode dNoWrap\">two</span> point to <span class=\"dCode dNoWrap\">Grasshopper&#160;g2</span>. Immediately after line 10, we still only have <span class=\"dCode dNoWrap\">Grasshopper&#160;g1</span> eligible for garbage collection. Reference <span class=\"dCode dNoWrap\">one</span> points to <span class=\"dCode dNoWrap\">g1</span> and reference <span class=\"dCode dNoWrap\">two</span> is <span class=\"dCode dNoWrap\">null</span>. Immediately after line 11, both <span class=\"dCode dNoWrap\">Grasshopper</span> objects are eligible for garbage collection since both <span class=\"dCode dNoWrap\">one</span> and <span class=\"dCode dNoWrap\">two</span> point to <span class=\"dCode dNoWrap\">null</span>. The code does compile. Although it is traditional to declare instance variables early in the class, you don't have to. For more information, see Chapter 1.","display_order":"1"}]},{"id":"29883","attempts_id":"205579","question_id":"29883","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mcq","answer":"5","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"What is the result of the following class?<br><br><span class=\"dCode dNoWrap\">1:&#160;public&#160;class&#160;_C&#160;{</span><br><span class=\"dCode dNoWrap\">2:&#160;&#160;private&#160;static&#160;int&#160;$;</span><br><span class=\"dCode dNoWrap\">3:&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;main)&#160;{</span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;String&#160;a_b;</span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;System.out.print($);</span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;System.out.print(a_b);</span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;}&#160;}</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"Compiler error on line 1 ","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"Compiler error on line 2","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"Compiler error on line 4","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"Compiler error on line 5","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"Compiler error on line 6","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">0null</span>","display_order":"1"}]},{"id":"7","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">nullnull</span>","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"Option E is correct because local variables require assignment before referencing them. Option D is incorrect because class and instance variables have default values and allow referencing. <span class=\"dCode dNoWrap\">a_b</span> defaults to a null value. Options A, B, and C are incorrect because identifiers may begin with a letter, underscore, or dollar sign. Options F and G are incorrect because the code does not compile. If <span class=\"dCode dNoWrap\">a_b</span> was an instance variable, the code would compile and output <span class=\"dCode dNoWrap\">0null</span>. For more information, see Chapter 1.","display_order":"1"}]},{"id":"29896","attempts_id":"205579","question_id":"29896","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mmcq","answer":"4;5;6","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"Assuming we have a valid, non-<span class=\"dCode dNoWrap\">null</span> <span class=\"dCode dNoWrap\">HenHouse</span> object whose value is initialized by the blank line shown here, which of the following are possible outputs of this application? (Choose all that apply)<br><br><span class=\"dCode dNoWrap\">1:&#160;class&#160;Chicken&#160;{}</span><br><span class=\"dCode dNoWrap\">2:&#160;interface&#160;HenHouse&#160;{&#160;public&#160;java.util.List&#60;Chicken&#62;&#160;getChickens();&#160;}</span><br><span class=\"dCode dNoWrap\">3:&#160;public&#160;class&#160;ChickenSong&#160;{</span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{</span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;&#160;HenHouse&#160;house&#160;=&#160;______________</span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;&#160;Chicken&#160;chicken&#160;=&#160;house.getChickens().get(0);</span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;&#160;for(int&#160;i=0;&#160;i&#60;house.getChickens().size();&#160;</span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;&#160;&#160;&#160;&#160;chicken&#160;=&#160;house.getChickens().get(i++))&#160;{</span><br><span class=\"dCode dNoWrap\">9:&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(\"Cluck\");</span><br><span class=\"dCode dNoWrap\">10:&#160;}&#160;}&#160;}</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"The code will not compile because of line 6.","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"The code will not compile because of lines 7&#8211;8.","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"The application will compile but not produce any output.","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"The application will output <span class=\"dCode dNoWrap\">Cluck</span> exactly once.","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"The application will output <span class=\"dCode dNoWrap\">Cluck</span> more than once.","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"The application will compile but produce an exception at runtime.","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"The code compiles without issue, so options A and B are incorrect. If <span class=\"dCode dNoWrap\">house.getChickens()</span> returns an array of one element, the code will output <span class=\"dCode dNoWrap\">Cluck</span> once, so option D is correct. If <span class=\"dCode dNoWrap\">house.getChickens()</span> returns an array of multiple elements, the code will output <span class=\"dCode dNoWrap\">Cluck</span> once for each element in the array, so option E is correct. Alternatively, if <span class=\"dCode dNoWrap\">house.getChickens()</span> returns an array of zero elements, then the code will throw an <span class=\"dCode dNoWrap\">IndexOutOfBoundsException</span> on the call to <span class=\"dCode dNoWrap\">house.getChickens().get(0)</span>; therefore, option C is not possible and option F is correct. The code will also throw an exception if the array returned by <span class=\"dCode dNoWrap\">house.getChickens()</span> is <span class=\"dCode dNoWrap\">null</span>, so option F is possible under multiple circumstances. For more information, see Chapter 2.","display_order":"1"}]},{"id":"29890","attempts_id":"205579","question_id":"29890","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mcq","answer":"1","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"What is the output of the following code?<br><br><span class=\"dCode dNoWrap\">1:&#160;public&#160;class&#160;Deer&#160;{</span><br><span class=\"dCode dNoWrap\">2:&#160;&#160;public&#160;Deer()&#160;{&#160;System.out.print(\"Deer\");&#160;}</span><br><span class=\"dCode dNoWrap\">3:&#160;&#160;public&#160;Deer(int&#160;age)&#160;{&#160;System.out.print(\"DeerAge\");&#160;}</span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;private&#160;boolean&#160;hasHorns()&#160;{&#160;return&#160;false;&#160;}</span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{</span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;Deer&#160;deer&#160;=&#160;new&#160;Reindeer(5);</span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;System.out.println(\",\"+deer.hasHorns());</span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;}</span><br><span class=\"dCode dNoWrap\">9:&#160;}</span><br><span class=\"dCode dNoWrap\">10:&#160;class&#160;Reindeer&#160;extends&#160;Deer&#160;{</span><br><span class=\"dCode dNoWrap\">11:&#160;&#160;public&#160;Reindeer(int&#160;age)&#160;{&#160;System.out.print(\"Reindeer\");&#160;}</span><br><span class=\"dCode dNoWrap\">12:&#160;&#160;public&#160;boolean&#160;hasHorns()&#160;{&#160;return&#160;true;&#160;}</span><br><span class=\"dCode dNoWrap\">13:&#160;}&#160;</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">DeerReindeer,false</span>","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">DeerReindeer,true</span>","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">ReindeerDeer,false</span>","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">ReindeerDeer,true</span>","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">DeerAgeReindeer,false</span>","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">DeerAgeReindeer,true</span>","display_order":"1"}]},{"id":"7","data":[{"data_type_id":"2","data":"The code will not compile because of line 7.","display_order":"1"}]},{"id":"8","data":[{"data_type_id":"2","data":"The code will not compile because of line 12.","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"The code compiles and runs without issue, so options G and H are incorrect. First, the <span class=\"dCode dNoWrap\">Reindeer</span> object is instantiated using the constructor that takes an <span class=\"dCode dNoWrap\">int</span> value. Since there is no explicit call to the parent constructor, the default no-argument <span class=\"dCode dNoWrap\">super()</span> is inserted as the first line of the constructor. The output is then <span class=\"dCode dNoWrap\">Deer</span>, followed by <span class=\"dCode dNoWrap\">Reindeer</span> in the child constructor, so only options A and B can be correct. Next, the method <span class=\"dCode dNoWrap\">hasHorns()</span> looks like an overridden method, but it is actually a hidden method since it is declared private in the parent class. Because the hidden method is referenced in the parent class, the parent version is used, so the code outputs <span class=\"dCode dNoWrap\">false</span>, and option A is the correct answer.","display_order":"1"}]},{"id":"29888","attempts_id":"205579","question_id":"29888","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mcq","answer":"2","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"What is the result of the following program?<br><br><span class=\"dCode dNoWrap\">1:&#160;public&#160;class&#160;MathFunctions&#160;{</span><br><span class=\"dCode dNoWrap\">2:&#160;&#160;&#160;public&#160;static&#160;void&#160;addToInt(int&#160;x,&#160;int&#160;amountToAdd)&#160;{</span><br><span class=\"dCode dNoWrap\">3:&#160;&#160;&#160;&#160;&#160;x&#160;=&#160;x&#160;+&#160;amountToAdd;</span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;}</span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{</span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;&#160;int&#160;a&#160;=&#160;15;</span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;&#160;int&#160;b&#160;=&#160;10;</span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;&#160;&#160;MathFunctions.addToInt(a,&#160;b);</span><br><span class=\"dCode dNoWrap\">9:&#160;&#160;&#160;&#160;&#160;System.out.println(a);&#160;&#160;&#160;}&#160;}</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">10</span>","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">15</span>","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">25</span>","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"Compiler error on line 3","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"Compiler error on line 8","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"None of the above","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"The code compiles successfully, so options D and E are incorrect. The value of <span class=\"dCode dNoWrap\"><i>a</i></span> cannot be changed by the <span class=\"dCode dNoWrap\">addToInt</span> method, no matter what the method does, because only a copy of the variable is passed into the parameter <span class=\"dCode dNoWrap\"><i>x</i></span>. Therefore, <span class=\"dCode dNoWrap\"><i>a</i></span> does not change and the output on line 9 is 15. For more information, see Chapter 4.","display_order":"1"}]},{"id":"29886","attempts_id":"205579","question_id":"29886","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mcq","answer":"3","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"What is the output of the following program?<br><br><span class=\"dCode dNoWrap\">1:&#160;public&#160;class&#160;FeedingSchedule&#160;{</span><br><span class=\"dCode dNoWrap\">2:&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{</span><br><span class=\"dCode dNoWrap\">3:&#160;&#160;&#160;&#160;boolean&#160;keepGoing&#160;=&#160;true;</span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;int&#160;count&#160;=&#160;0;</span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;int&#160;x&#160;=&#160;3;</span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;while(count++&#160;&#60;&#160;3)&#160;{</span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;&#160;&#160;int&#160;y&#160;=&#160;(1&#160;+&#160;2&#160;*&#160;count)&#160;%&#160;3;</span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;&#160;&#160;&#160;switch(y)&#160;{</span><br><span class=\"dCode dNoWrap\">9:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;default:</span><br><span class=\"dCode dNoWrap\">10:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case&#160;0:&#160;x&#160;-=&#160;1;&#160;break;</span><br><span class=\"dCode dNoWrap\">11:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case&#160;1:&#160;x&#160;+=&#160;5;</span><br><span class=\"dCode dNoWrap\">12:&#160;&#160;&#160;&#160;&#160;&#160;}</span><br><span class=\"dCode dNoWrap\">13:&#160;&#160;&#160;&#160;}</span><br><span class=\"dCode dNoWrap\">14:&#160;&#160;System.out.println(x);</span><br><span class=\"dCode dNoWrap\">15:&#160;}&#160;}</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">4</span>","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">5</span>","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">6</span>","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">7</span>","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">13</span>","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"The code will not compile because of line 7.","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"The code compiles and runs without issue; therefore option F is incorrect. This type of problem is best examined one loop iteration at a time:<br><ul class=\"dUL\"><li>The loop continues as count loop expression evaluates to <span class=\"dCode dNoWrap\">0&#160;&#60;&#160;3</span>, which is <span class=\"dCode dNoWrap\">true</span>, with <span class=\"dCode dNoWrap\">y</span> taking a new value of <span class=\"dCode dNoWrap\">1</span>. The value of <span class=\"dCode dNoWrap\">y</span> is set to:<br><span class=\"dCode dNoWrap\">y&#160;=&#160;(1&#160;+&#160;2&#160;*&#160;1)&#160;%&#160;3</span><br><span class=\"dCode dNoWrap\">&#160;&#160;=&#160;(1&#160;+&#160;2)&#160;%&#160;3</span><br><span class=\"dCode dNoWrap\">&#160;&#160;=&#160;3&#160;%&#160;3</span><br><span class=\"dCode dNoWrap\">&#160;&#160;=&#160;0&#160;</span></li> <li>The first <span class=\"dCode dNoWrap\">case</span> block is called and the value of <span class=\"dCode dNoWrap\">x</span> is then set to:<br><span class=\"dCode dNoWrap\">x&#160;=&#160;3&#160;-&#160;1&#160;=&#160;2</span></li> <li>The loop continues as count loop expression evaluates to <span class=\"dCode dNoWrap\">1&#160;&#60;&#160;3</span>, which is <span class=\"dCode dNoWrap\">true</span>, with <span class=\"dCode dNoWrap\">y</span> taking a new value of <span class=\"dCode dNoWrap\">2</span>. The value of <span class=\"dCode dNoWrap\">y</span> is set to:<br><span class=\"dCode dNoWrap\">y&#160;=&#160;(1&#160;+&#160;2&#160;*&#160;2)&#160;%&#160;3</span><br><span class=\"dCode dNoWrap\">&#160;&#160;=&#160;(1&#160;+&#160;4)&#160;%&#160;3</span><br><span class=\"dCode dNoWrap\">&#160;&#160;=&#160;4&#160;%&#160;3&#160;</span><br><span class=\"dCode dNoWrap\">&#160;&#160;=&#160;2&#160;</span></li> <li>The <span class=\"dCode dNoWrap\">default</span> block is called and the value of <span class=\"dCode dNoWrap\">x</span> is set to:<br><span class=\"dCode dNoWrap\">x&#160;=&#160;2&#160;-&#160;1&#160;=&#160;1</span></li> <li>The loop continues as the count loop expression evaluates to <span class=\"dCode dNoWrap\">2&#160;&#60;&#160;3</span>, which is <span class=\"dCode dNoWrap\">true</span>, with <span class=\"dCode dNoWrap\">y</span> taking a new value of <span class=\"dCode dNoWrap\">3</span>. The value of <span class=\"dCode dNoWrap\">y</span> is set to:<br><span class=\"dCode dNoWrap\">y&#160;=&#160;(1&#160;+&#160;2&#160;*&#160;3)&#160;%&#160;3</span><br><span class=\"dCode dNoWrap\">&#160;&#160;=&#160;(1&#160;+&#160;6)&#160;%&#160;3</span><br><span class=\"dCode dNoWrap\">&#160;&#160;=&#160;7&#160;%&#160;3&#160;</span><br><span class=\"dCode dNoWrap\">&#160;&#160;=&#160;1&#160;</span></li> <li>The second <span class=\"dCode dNoWrap\">case</span> block is called and the value of <span class=\"dCode dNoWrap\">x</span> is then set to:<br><span class=\"dCode dNoWrap\">x&#160;=&#160;1&#160;+&#160;5&#160;=&#160;6</span></li> <li>The loop ends as the count loop expression evaluates to <span class=\"dCode dNoWrap\">3&#160;&#60;&#160;3</span>, with <span class=\"dCode dNoWrap\">y</span> also taking a new value of <span class=\"dCode dNoWrap\">4</span>. The most recent value of <span class=\"dCode dNoWrap\">x</span>, <span class=\"dCode dNoWrap\">6</span>, is output, so the answer is option C. For more information, see Chapter 2.</li></ul>","display_order":"1"}]},{"id":"29895","attempts_id":"205579","question_id":"29895","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mcq","answer":"3","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"What is the output of the following program?<br><br><span class=\"dCode dNoWrap\">1:&#160;public&#160;class&#160;BearOrShark&#160;{</span><br><span class=\"dCode dNoWrap\">2:&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{</span><br><span class=\"dCode dNoWrap\">3:&#160;&#160;&#160;&#160;&#160;int&#160;luck&#160;=&#160;10;</span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;&#160;if((luck&#62;10&#160;?&#160;luck++:&#160;--luck)&#60;10)&#160;{</span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(\"Bear\");</span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;&#160;}&#160;if(luck&#60;10)&#160;System.out.print(\"Shark\");</span><br><span class=\"dCode dNoWrap\">7:&#160;}&#160;}</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">Bear</span>","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">Shark</span>","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">BearShark</span>","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"The code will not compile because of line 4.","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"The code will not compile because of line 6.","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"The code compiles without issue but does not produce any output.","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"The code compiles and runs without issue, so options D and E are correct. Remember that only one of the right-hand ternary expressions will be evaluated at runtime. Since <span class=\"dCode dNoWrap\">luck</span> is not less than <span class=\"dCode dNoWrap\">10</span>, the second expression, <span class=\"dCode dNoWrap\">--luck</span>, will be evaluated, and since the pre-increment operator was used, the value returned will be <span class=\"dCode dNoWrap\">9</span>, which is less than <span class=\"dCode dNoWrap\">10</span>. So the first <span class=\"dCode dNoWrap\">if-then</span> statement will be visited and <span class=\"dCode dNoWrap\">Bear</span> will be output. Notice there is no <span class=\"dCode dNoWrap\">else</span> statement on line 6. Since <span class=\"dCode dNoWrap\">luck</span> is still less than <span class=\"dCode dNoWrap\">10</span>, the second <span class=\"dCode dNoWrap\">if-then</span> statement will also be reached and <span class=\"dCode dNoWrap\">Shark</span> will be output; therefore, the correct answer is option C. For more information, see Chapter 2.","display_order":"1"}]},{"id":"29899","attempts_id":"205579","question_id":"29899","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mmcq","answer":"1;3;6","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"Which of the following lines can be inserted at line 11 to print true? (Choose all that apply)<br><br><span class=\"dCode dNoWrap\">10:&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{</span><br><span class=\"dCode dNoWrap\">11:&#160;&#160;&#160;//&#160;INSERT&#160;CODE&#160;HERE</span><br><span class=\"dCode dNoWrap\">12:&#160;}</span><br><span class=\"dCode dNoWrap\">13:&#160;private&#160;static&#160;boolean&#160;test(Predicate&#60;Integer&#62;&#160;p)&#160;{</span><br><span class=\"dCode dNoWrap\">14:&#160;&#160;&#160;return&#160;p.test(5);</span><br><span class=\"dCode dNoWrap\">15:&#160;}</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">System.out.println(test(i&#160;-&#62;&#160;i&#160;==&#160;5));</span>","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">System.out.println(test(i&#160;-&#62;&#160;{i&#160;==&#160;5;}));</span>","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">System.out.println(test((i)&#160;-&#62;&#160;i&#160;==&#160;5));</span>","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">System.out.println(test((int&#160;i)&#160;-&#62;&#160;i&#160;==&#160;5);</span>","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">System.out.println(test((int&#160;i)&#160;-&#62;&#160;{return&#160;i&#160;==&#160;5;}));</span>","display_order":"1"}]},{"id":"6","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">System.out.println(test((i)&#160;-&#62;&#160;{return&#160;i&#160;==&#160;5;}));</span>","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"The only functional programming interface you need to memorize for the exam is <span class=\"dCode dNoWrap\">Predicate</span>. It takes a single parameter and returns a <span class=\"dCode dNoWrap\">boolean</span>. Lambda expressions with one parameter are allowed to omit the parentheses around the parameter list, making options A and C correct. The <span class=\"dCode dNoWrap\">return</span> statement is optional when a single statement is in the body, making option F correct. Option B is incorrect because a <span class=\"dCode dNoWrap\">return</span> statement must be used if braces are included around the body. Options D and E are incorrect because the type is <span class=\"dCode dNoWrap\">Integer</span> in the predicate and <span class=\"dCode dNoWrap\">int</span> in the lambda. Autoboxing works for collections not inferring predicates. If these two were changed to <span class=\"dCode dNoWrap\">Integer</span>, they would be correct. For more information, see Chapter 4.","display_order":"1"}]},{"id":"29884","attempts_id":"205579","question_id":"29884","user_answer":null,"notes":null,"is_bookmarked":"0","is_correct":null,"time_spent":"0","status":"0","section_id":"862","question_type_id":null,"question_type":"mcq","answer":"3","is_final":"0","opt_start":"1","correctAnserForDisplay":null,"difficulty_level":"Easy","assessment_title":"Problem Solving","learning_objective":"Arithmetic Operations with rational numbers","suffix":null,"prefix":null,"direction":[],"questionData":[{"data_type_id":"2","data":"What is the result of the following code?<br><br><span class=\"dCode dNoWrap\">String&#160;s1&#160;=&#160;\"Java\";</span><br><span class=\"dCode dNoWrap\">String&#160;s2&#160;=&#160;\"Java\";</span><br><span class=\"dCode dNoWrap\">StringBuilder&#160;sb1&#160;=&#160;new&#160;StringBuilder();</span><br><span class=\"dCode dNoWrap\">sb1.append(\"Ja\").append(\"va\");</span><br><span class=\"dCode dNoWrap\">System.out.println(s1&#160;==&#160;s2);</span><br><span class=\"dCode dNoWrap\">System.out.println(s1.equals(s2));</span><br><span class=\"dCode dNoWrap\">System.out.println(sb1.toString()&#160;==&#160;s1);</span><br><span class=\"dCode dNoWrap\">System.out.println(sb1.toString().equals(s1));</span>","display_order":"1"}],"choiceData":[{"id":"1","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">true</span> is printed out exactly once.","display_order":"1"}]},{"id":"2","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">true</span> is printed out exactly twice.","display_order":"1"}]},{"id":"3","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">true</span> is printed out exactly three times.","display_order":"1"}]},{"id":"4","data":[{"data_type_id":"2","data":"<span class=\"dCode dNoWrap\">true</span> is printed out exactly four times.","display_order":"1"}]},{"id":"5","data":[{"data_type_id":"2","data":"The code does not compile.","display_order":"1"}]}],"hints":[{"data_type_id":"2","data":"String literals are used from the string pool. This means that <span class=\"dCode dNoWrap\"><i>s1</i></span> and <span class=\"dCode dNoWrap\"><i>s2</i></span> refer to the same object and are equal. Therefore the first two print statements print <span class=\"dCode dNoWrap\">true</span>. The third print statement prints <span class=\"dCode dNoWrap\">false</span> because <span class=\"dCode dNoWrap\">toString()</span> uses a method to compute the value and it is not from the string pool. The finally print statement again prints <span class=\"dCode dNoWrap\">true</span> because <span class=\"dCode dNoWrap\">equals()</span> looks at the values of <span class=\"dCode dNoWrap\">String</span> objects. For more information, see Chapter 3.","display_order":"1"}]}]
